// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/authcode.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/authcode.go -package=repository -destination=./internal/repository/authcode.mock.go
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthCodeRepository is a mock of AuthCodeRepository interface.
type MockAuthCodeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthCodeRepositoryMockRecorder
}

// MockAuthCodeRepositoryMockRecorder is the mock recorder for MockAuthCodeRepository.
type MockAuthCodeRepositoryMockRecorder struct {
	mock *MockAuthCodeRepository
}

// NewMockAuthCodeRepository creates a new mock instance.
func NewMockAuthCodeRepository(ctrl *gomock.Controller) *MockAuthCodeRepository {
	mock := &MockAuthCodeRepository{ctrl: ctrl}
	mock.recorder = &MockAuthCodeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthCodeRepository) EXPECT() *MockAuthCodeRepositoryMockRecorder {
	return m.recorder
}

// Set mocks base method.
func (m *MockAuthCodeRepository) Set(ctx context.Context, businessName, phoneNumber, authCode string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, businessName, phoneNumber, authCode)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockAuthCodeRepositoryMockRecorder) Set(ctx, businessName, phoneNumber, authCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockAuthCodeRepository)(nil).Set), ctx, businessName, phoneNumber, authCode)
}

// Verify mocks base method.
func (m *MockAuthCodeRepository) Verify(ctx context.Context, businessName, phoneNumber, authCode string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, businessName, phoneNumber, authCode)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockAuthCodeRepositoryMockRecorder) Verify(ctx, businessName, phoneNumber, authCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockAuthCodeRepository)(nil).Verify), ctx, businessName, phoneNumber, authCode)
}

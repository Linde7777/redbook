// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/cache/user.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/cache/user.go -package=cache -destination=./internal/repository/cache/user.mock.go
//

// Package cache is a generated GoMock package.
package cache

import (
	context "context"
	domain "main/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserCache is a mock of UserCache interface.
type MockUserCache struct {
	ctrl     *gomock.Controller
	recorder *MockUserCacheMockRecorder
}

// MockUserCacheMockRecorder is the mock recorder for MockUserCache.
type MockUserCacheMockRecorder struct {
	mock *MockUserCache
}

// NewMockUserCache creates a new mock instance.
func NewMockUserCache(ctrl *gomock.Controller) *MockUserCache {
	mock := &MockUserCache{ctrl: ctrl}
	mock.recorder = &MockUserCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCache) EXPECT() *MockUserCacheMockRecorder {
	return m.recorder
}

// GetUserByEmail mocks base method.
func (m *MockUserCache) GetUserByEmail(ctx context.Context, email string) (domain.User, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserCacheMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserCache)(nil).GetUserByEmail), ctx, email)
}

// SetUserByEmail mocks base method.
func (m *MockUserCache) SetUserByEmail(ctx context.Context, user domain.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserByEmail", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserByEmail indicates an expected call of SetUserByEmail.
func (mr *MockUserCacheMockRecorder) SetUserByEmail(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserByEmail", reflect.TypeOf((*MockUserCache)(nil).SetUserByEmail), ctx, user)
}

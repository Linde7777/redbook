// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/authcode.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/authcode.go -package=service -destination=./internal/service/authcode.mock.go
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthCodeService is a mock of AuthCodeService interface.
type MockAuthCodeService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthCodeServiceMockRecorder
}

// MockAuthCodeServiceMockRecorder is the mock recorder for MockAuthCodeService.
type MockAuthCodeServiceMockRecorder struct {
	mock *MockAuthCodeService
}

// NewMockAuthCodeService creates a new mock instance.
func NewMockAuthCodeService(ctrl *gomock.Controller) *MockAuthCodeService {
	mock := &MockAuthCodeService{ctrl: ctrl}
	mock.recorder = &MockAuthCodeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthCodeService) EXPECT() *MockAuthCodeServiceMockRecorder {
	return m.recorder
}

// SendAuthCode mocks base method.
func (m *MockAuthCodeService) SendAuthCode(ctx context.Context, businessName, phoneNumber string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAuthCode", ctx, businessName, phoneNumber)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAuthCode indicates an expected call of SendAuthCode.
func (mr *MockAuthCodeServiceMockRecorder) SendAuthCode(ctx, businessName, phoneNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAuthCode", reflect.TypeOf((*MockAuthCodeService)(nil).SendAuthCode), ctx, businessName, phoneNumber)
}

// VerifyAuthCode mocks base method.
func (m *MockAuthCodeService) VerifyAuthCode(ctx context.Context, businessName, phoneNumber, authCode string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAuthCode", ctx, businessName, phoneNumber, authCode)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAuthCode indicates an expected call of VerifyAuthCode.
func (mr *MockAuthCodeServiceMockRecorder) VerifyAuthCode(ctx, businessName, phoneNumber, authCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAuthCode", reflect.TypeOf((*MockAuthCodeService)(nil).VerifyAuthCode), ctx, businessName, phoneNumber, authCode)
}
